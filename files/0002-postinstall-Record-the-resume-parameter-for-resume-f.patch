From 2d0a092b45a1d8acb6c70a23c4d7b52abceb05f1 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Fri, 14 Oct 2016 04:59:45 +0100
Subject: [PATCH 02/10] postinstall: Record the resume= parameter for
 resume-from-suspend

This fixes issue #18.

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 os_installer2/postinstall.py | 35 ++++++++++++++++++++++++++++++++---
 1 file changed, 32 insertions(+), 3 deletions(-)

diff --git a/os_installer2/postinstall.py b/os_installer2/postinstall.py
index 2655aed..fb4f0fe 100644
--- a/os_installer2/postinstall.py
+++ b/os_installer2/postinstall.py
@@ -652,6 +652,9 @@ class PostInstallFstab(PostInstallStep):
 class PostInstallBootloader(PostInstallStep):
     """ Install the bootloader itself """
 
+    # We record swap uuid into resume= parameter
+    swap_uuid = None
+
     def __init__(self, info, installer):
         PostInstallStep.__init__(self, info, installer)
 
@@ -659,6 +662,17 @@ class PostInstallBootloader(PostInstallStep):
         return "Configuring bootloader.. please wait"
 
     def apply(self):
+        # Determine the swap path
+        swap_path = None
+        for op in self.info.strategy.get_operations():
+            if isinstance(op, DiskOpCreateSwap):
+                swap_path = op.part.path
+            elif isinstance(op, DiskOpUseSwap):
+                swap_path = op.swap_part.path
+
+        if swap_path is not None:
+            self.swap_uuid = get_part_uuid(swap_path)
+
         if self.info.strategy.is_uefi():
             return self.apply_uefi()
         return self.apply_bios()
@@ -689,10 +703,21 @@ class PostInstallBootloader(PostInstallStep):
 
     def apply_bios_config(self):
         """ Rewrite /etc/default/grub for GRUB_CMDLINE """
-        if not self.is_encrypted_install():
+        if not self.is_encrypted_install() and not self.swap_uuid:
             return True
 
-        luks_uuid = self.get_luks_uuid()
+        # Default options
+        options = "quiet splash"
+
+        # Set the LUKS Container UUID
+        if self.is_encrypted_install():
+            luks_uuid = self.get_luks_uuid()
+            options += " rd.luks.uuid={}".format(luks_uuid)
+
+        # Add the resume from swap parameter if necessary
+        if self.swap_uuid is not None:
+            options += " resume=UUID={}".format(self.swap_uuid)
+
         # Now, load in, rewrite as we go..
         lines = []
         ogrub = os.path.join(self.installer.get_installer_target_filesystem(),
@@ -705,7 +730,7 @@ class PostInstallBootloader(PostInstallStep):
                     # Have to provide rd.luks.uuid
                     if "GRUB_CMDLINE_LINUX_DEFAULT=" in line:
                         line = "GRUB_CMDLINE_LINUX_DEFAULT=\"{}\"".format(
-                            "quiet splash rd.luks.uuid={}".format(luks_uuid))
+                            options)
                     lines.append(line)
 
             with open(ogrub, "w") as grub_output:
@@ -794,6 +819,10 @@ class PostInstallBootloader(PostInstallStep):
         if self.is_encrypted_install():
             cmdline += " rd.luks.uuid={}".format(self.get_luks_uuid())
 
+        # Resume from swap
+        if self.swap_uuid is not None:
+            cmdline += " resume=UUID={}".format(self.swap_uuid)
+
         try:
             with open(solfile, "w") as solconf:
                 conf = [
-- 
2.10.1

