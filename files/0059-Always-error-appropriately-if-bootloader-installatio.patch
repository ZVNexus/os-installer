From 2545d49cc06e69e3cbe0e6923cca675c17417956 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Sun, 12 Jun 2016 20:25:57 +0100
Subject: [PATCH 59/80] Always error appropriately if bootloader installation
 isn't possible..

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 os_installer2/pages/system.py | 12 ++++++++----
 os_installer2/strategy.py     |  7 ++++---
 2 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/os_installer2/pages/system.py b/os_installer2/pages/system.py
index 6226b7b..ade3296 100644
--- a/os_installer2/pages/system.py
+++ b/os_installer2/pages/system.py
@@ -104,7 +104,7 @@ class InstallerSystemPage(BasePage):
 
     def check_forward(self):
         """ Determine if we can forward/back """
-        bs = [self.info.hostname, self.check_boot.get_active()]
+        bs = [self.info.hostname, self.info.bootloader]
         misfires = [x for x in bs if not x]
         if len(misfires) == 0:
             self.info.owner.set_can_next(True)
@@ -134,7 +134,7 @@ class InstallerSystemPage(BasePage):
             self.info.hostname = text
         else:
             self.info.hostname = None
-        self.info.owner.set_can_next(can_fwd)
+        self.check_forward()
 
     def get_title(self):
         return "System Settings"
@@ -171,5 +171,9 @@ class InstallerSystemPage(BasePage):
         self.info.owner.set_can_next(False)
         err = info.strategy.get_errors()
         # UEFI specific
-        self.error_label2.set_label(
-            "Failed to find location for bootloader: {}".format(err))
+        if err:
+            self.error_label2.set_label(
+                "Failed to find location for bootloader: {}".format(err))
+        else:
+            self.error_label2.set_label(
+                "Cannot find a valid bootloader location (MBR disk)")
diff --git a/os_installer2/strategy.py b/os_installer2/strategy.py
index b0a23ca..10b3984 100644
--- a/os_installer2/strategy.py
+++ b/os_installer2/strategy.py
@@ -159,9 +159,10 @@ class DiskStrategy:
             # MBR you can go anywhere you want.
             paths = [
                 (self.dsc(x), x.path) for x in self.dp.drives
-                if x.path != self.drive.path
+                if x.path != self.drive.path and x.disk.type == "msdos"
             ]
-            paths.append((self.dsc(self.drive), self.drive.path))
+            if self.drive.disk and self.drive.disk.type == "msdos":
+                paths.append((self.dsc(self.drive), self.drive.path))
             paths.reverse()
             return paths
         esps = self.dp.collect_esp()
@@ -227,7 +228,7 @@ class EmptyDiskStrategy(DiskStrategy):
             # MBR you can go anywhere you want.
             paths = [
                 (self.dsc(x), x.path) for x in self.dp.drives
-                if x.path != self.drive.path
+                if x.path != self.drive.path and x.disk.type == "msdos"
             ]
             paths.append((self.dsc(self.drive), self.drive.path))
             paths.reverse()
-- 
2.8.3

