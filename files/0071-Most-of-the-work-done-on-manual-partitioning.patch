From ad3120a782e5c43ccf295f9e82032981cad1a866 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Sun, 12 Jun 2016 22:22:27 +0100
Subject: [PATCH 71/80] Most of the work done on manual partitioning..

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 os_installer2/diskops.py            | 67 ++++++++++++++++++++++++++++++++++++-
 os_installer2/pages/partitioning.py | 24 +++++++++++++
 os_installer2/strategy.py           | 54 ++++++++++++++++++++++++++++++
 3 files changed, 144 insertions(+), 1 deletion(-)

diff --git a/os_installer2/diskops.py b/os_installer2/diskops.py
index 8d39c39..51e0397 100644
--- a/os_installer2/diskops.py
+++ b/os_installer2/diskops.py
@@ -415,7 +415,7 @@ class DiskOpFormatRoot(DiskOpFormatPartition):
         DiskOpFormatPartition.__init__(self, device, part, "ext4")
 
     def describe(self):
-        return "Use {} as {} root partition".format(
+        return "Format {} as {} root partition".format(
             self.part.path, self.format_type)
 
     def apply(self, disk, simulate):
@@ -429,3 +429,68 @@ class DiskOpFormatRoot(DiskOpFormatPartition):
             self.set_errors("{}: {}".format(self.part.path, e))
             return False
         return True
+
+
+class DiskOpFormatSwap(DiskOpFormatPartition):
+    """ Format the swap partition """
+
+    def __init__(self, device, part):
+        DiskOpFormatPartition.__init__(self, device, part, "swap")
+
+    def describe(self):
+        return "Use {} as {} swap partition".format(
+            self.part.path, self.format_type)
+
+    def apply(self, disk, simulate):
+        if simulate:
+            return True
+
+        cmd = "mkswap {}".format(self.part.path)
+        try:
+            subprocess.check_call(cmd, shell=True)
+        except Exception as e:
+            self.set_errors("{}: {}".format(self.part.path, e))
+            return False
+        return True
+
+
+class DiskOpFormatHome(DiskOpFormatPartition):
+    """ Format the home partition """
+
+    def __init__(self, device, part):
+        DiskOpFormatPartition.__init__(self, device, part, "ext4")
+
+    def describe(self):
+        return "Format {} as {} home partition".format(
+            self.part.path, self.format_type)
+
+    def apply(self, disk, simulate):
+        if simulate:
+            return True
+
+        cmd = "mkfs.ext4 -F {}".format(self.part.path)
+        try:
+            subprocess.check_call(cmd, shell=True)
+        except Exception as e:
+            self.set_errors("{}: {}".format(self.part.path, e))
+            return False
+        return True
+
+
+class DiskOpUseHome(BaseDiskOp):
+    """ Use an existing home paritition """
+
+    home_part = None
+    path = None
+
+    def __init__(self, device, home_part):
+        BaseDiskOp.__init__(self, device)
+        self.home_part = home_part
+        self.path = self.home_part.path
+
+    def describe(self):
+        return "Use {} as home partition".format(self.home_part.path)
+
+    def apply(self, disk, simulate):
+        """ Can't actually fail here. """
+        return True
diff --git a/os_installer2/pages/partitioning.py b/os_installer2/pages/partitioning.py
index 88ca4b5..ef78533 100644
--- a/os_installer2/pages/partitioning.py
+++ b/os_installer2/pages/partitioning.py
@@ -416,6 +416,30 @@ class ManualPage(Gtk.VBox):
             self.info.owner.set_can_next(False)
             return
 
+        home_format = False
+        home_obj = None
+        swap_format = False
+        swap_obj = None
+        root_obj = None
+        model = self.treeview.get_model()
+        for row in model:
+            point = row[INDEX_PARTITION_MOUNT_AS]
+            if point == 'swap':
+                swap_format = row[INDEX_PARTITION_FORMAT]
+                swap_obj = row[INDEX_PARTITION_OBJECT]
+            elif point == '/home':
+                home_format = row[INDEX_PARTITION_FORMAT]
+                home_obj = row[INDEX_PARTITION_OBJECT]
+                if isinstance(home_obj, SystemPartition):
+                    home_obj = home_obj.partition
+            elif point == '/':
+                root_obj = row[INDEX_PARTITION_OBJECT]
+                if isinstance(root_obj, SystemPartition):
+                    root_obj = root_obj.partition
+
+        self.info.strategy.set_root_partition(root_obj)
+        self.info.strategy.set_home_partition(home_obj, home_format)
+        self.info.strategy.set_swap_partition(swap_obj, swap_format)
         # Now we can go forward.
         self.selection_label.set_markup(labe)
         self.info.owner.set_can_next(True)
diff --git a/os_installer2/strategy.py b/os_installer2/strategy.py
index 7b689ab..2bc0b00 100644
--- a/os_installer2/strategy.py
+++ b/os_installer2/strategy.py
@@ -20,8 +20,12 @@ from .diskops import DiskOpCreateESP
 from .diskops import DiskOpFormatRoot
 from .diskops import DiskOpResizeOS
 from .diskops import DiskOpUseSwap
+from .diskops import DiskOpFormatSwap
+from .diskops import DiskOpFormatHome
+from .diskops import DiskOpUseHome
 from . import MIN_REQUIRED_SIZE, MB, GB
 
+
 SWAP_USE_THRESHOLD = 15 * GB
 ESP_FREE_REQUIRED = 60 * MB
 ESP_MIN_SIZE = 512
@@ -578,6 +582,26 @@ class UserPartitionStrategy(DiskStrategy):
 
     priority = 10
 
+    root_part = None
+    home_part = None
+    home_format = False
+    swap_part = None
+    swap_format = False
+
+    def set_root_partition(self, part):
+        """ Set the root partition to use """
+        self.root_part = part
+
+    def set_home_partition(self, part, fmt):
+        """ Set the home partition to use and maybe format """
+        self.home_part = part
+        self.home_format = fmt
+
+    def set_swap_partition(self, part, fmt):
+        """ Set the swap partition to use and maybe format """
+        self.swap_part = part
+        self.swap_format = part
+
     def __init__(self, dp, drive):
         DiskStrategy.__init__(self, dp, drive)
         self.drive = drive
@@ -593,6 +617,36 @@ class UserPartitionStrategy(DiskStrategy):
     def is_possible(self):
         return self.drive.size >= MIN_REQUIRED_SIZE
 
+    def find_device(self, dp, path):
+        for drive in dp.drives:
+            for part in drive.partitions:
+                if part == path:
+                    return drive.device
+            for part in drive.get_swap_partitions():
+                if part == path:
+                    return drive.device
+
+    def update_operations(self, dm, info):
+        if not self.root_part:
+            return
+        dev = self.find_device(info.prober, self.root_part)
+        self.push_operation(DiskOpFormatRoot(dev, self.root_part))
+
+        if self.swap_part:
+            dev = self.find_device(info.prober, self.swap_part)
+            if not self.swap_format:
+                self.push_operation(DiskOpUseSwap(dev, self.swap_part))
+            else:
+                self.push_operation(DiskOpFormatSwap(dev, self.swap_part))
+                self.push_operation(DiskOpUseSwap(dev, self.swap_part))
+        if self.home_part:
+            dev = self.find_device(info.prober, self.home_part)
+            if not self.home_format:
+                self.push_operation(DiskOpUseHome(dev, self.home_part))
+            else:
+                self.push_operation(DiskOpFormatHome(dev, self.home_part))
+                self.push_operation(DiskOpUseHome(dev, self.home_part))
+
 
 class DiskStrategyManager:
     """ Strategy manager for installation solutions """
-- 
2.8.3

