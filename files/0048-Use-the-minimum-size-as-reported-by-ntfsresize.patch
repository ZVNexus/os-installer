From f59dd4ef41f172cfd382c65184449e81fe981703 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Sun, 12 Jun 2016 12:22:42 +0100
Subject: [PATCH 48/85] Use the minimum size as reported by ntfsresize

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 os_installer2/diskman.py            | 32 ++++++++++++++++++++++++++++++++
 os_installer2/pages/partitioning.py |  2 +-
 os_installer2/strategy.py           |  5 +++--
 3 files changed, 36 insertions(+), 3 deletions(-)

diff --git a/os_installer2/diskman.py b/os_installer2/diskman.py
index 1295bdd..d4a5ac2 100644
--- a/os_installer2/diskman.py
+++ b/os_installer2/diskman.py
@@ -147,10 +147,32 @@ class SystemPartition:
     # Actual size of this partition
     size = None
 
+    # Absolute minimum size as reported by the filesystem
+    min_size = None
+
     def getLength(self):
         """ Purely for sort compat """
         return self.size
 
+    def build_ntfs_space(self):
+        cmd = "LANG=C ntfsresize -im --no-action {}".format(self.path)
+
+        try:
+            o = subprocess.check_output(cmd, shell=True)
+        except Exception as ex:
+            print("Cannot scan ntfs: {}".format(ex))
+            return
+
+        for l in o.split("\n"):
+            if ":" not in l:
+                continue
+            if "MB" not in l:
+                continue
+            min_size = long(l.split(":")[-1])
+            self.min_size = min_size * 1000 * 1000
+            self.resizable = True
+            break
+
     def __init__(self, partition, mount_point, dm):
         self.partition = partition
         self.path = partition.path
@@ -172,6 +194,16 @@ class SystemPartition:
         except Exception as e:
             print("Failed to stat {}: {}".format(mount_point, e))
 
+        # Now work out if we're resizable.
+        fs = partition.fileSystem
+        if not fs:
+            return
+        if fs.type == "ntfs":
+            try:
+                self.build_ntfs_space()
+            except Exception as e:
+                print("Undefined error in ntfs: {}".format(e))
+
 
 class SystemDrive:
     """ Handy helper for monitoring disks """
diff --git a/os_installer2/pages/partitioning.py b/os_installer2/pages/partitioning.py
index b9d066f..678e6ec 100644
--- a/os_installer2/pages/partitioning.py
+++ b/os_installer2/pages/partitioning.py
@@ -253,7 +253,7 @@ class DualBootPage(Gtk.VBox):
         self.image.set_pixel_size(64)
         self.label.set_markup("<big>{}</big>".format(os.name))
 
-        used = info.strategy.candidate_part.usedspace
+        used = info.strategy.candidate_part.min_size
         avail = info.strategy.candidate_part.size
 
         GB = 1000.0 * 1000.0 * 1000.0
diff --git a/os_installer2/strategy.py b/os_installer2/strategy.py
index 6aa6daf..b0a23ca 100644
--- a/os_installer2/strategy.py
+++ b/os_installer2/strategy.py
@@ -430,7 +430,8 @@ class DualBootStrategy(DiskStrategy):
             partition = self.drive.partitions[os_part]
             if not partition.resizable:
                 continue
-            if partition.size < MIN_REQUIRED_SIZE:
+            # Skip guys that are too small
+            if partition.size - partition.min_size < MIN_REQUIRED_SIZE:
                 continue
             if partition.freespace < MIN_REQUIRED_SIZE:
                 continue
@@ -460,7 +461,7 @@ class DualBootStrategy(DiskStrategy):
             self.candidate_os = self.sel_os.name
             # Default to using the whole thing =P
             self.set_our_size(
-                self.candidate_part.size - self.candidate_part.usedspace)
+                self.candidate_part.size - self.candidate_part.min_size)
             self.set_their_size(self.candidate_part.size - MIN_REQUIRED_SIZE)
             return True
         return False
-- 
2.8.3

