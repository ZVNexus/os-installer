From b112cc9fe19fd471896127856e62d58a60860e2d Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Sat, 11 Jun 2016 21:31:27 +0100
Subject: [PATCH 30/35] Don't explode in the absence of a pty

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 os_installer2/diskops.py | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/os_installer2/diskops.py b/os_installer2/diskops.py
index c58027a..1f74f07 100644
--- a/os_installer2/diskops.py
+++ b/os_installer2/diskops.py
@@ -305,14 +305,16 @@ class DiskOpResizeOS(BaseDiskOp):
 
                 # Check first
                 try:
-                    subprocess.check_call(check_cmd, shell=True)
+                    subprocess.check_output(check_cmd, shell=True,
+                                            stderr=subprocess.STDOUT)
                 except Exception as e:
                     self.set_errors(e)
                     return False
 
                 # Now resize it
                 try:
-                    subprocess.check_call(resize_cmd, shell=True)
+                    subprocess.check_output(resize_cmd, shell=True,
+                                            stderr=subprocess.STDOUT)
                 except Exception as e:
                     self.set_errors(e)
                     return False
@@ -341,7 +343,8 @@ class DiskOpResizeOS(BaseDiskOp):
                 # check it first
                 cmd1 = "e2fsck -f {}".format(self.part.path)
                 try:
-                    subprocess.check_call(cmd1, shell=True)
+                    subprocess.check_output(cmd1, shell=True,
+                                            stderr=subprocess.STDOUT)
                 except Exception as ex:
                     self.set_errors(ex)
                     return False
@@ -349,7 +352,8 @@ class DiskOpResizeOS(BaseDiskOp):
                 cmd = "resize2fs {} {}K".format(
                     self.part.path, str(int(self.their_size / 1024)))
                 try:
-                    subprocess.check_call(cmd, shell=True)
+                    subprocess.check_output(cmd, shell=True,
+                                            stderr=subprocess.STDOUT)
                 except Exception as ex:
                     self.set_errors(ex)
                     return False
-- 
2.8.3

